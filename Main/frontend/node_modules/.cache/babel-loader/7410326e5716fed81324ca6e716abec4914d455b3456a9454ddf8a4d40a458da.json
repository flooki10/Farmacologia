{"ast":null,"code":"import axios from 'axios';\nasync function buscarAlelosGen(gen) {\n  try {\n    const response = await axios.get(`https://api.cpicpgx.org/v1/allele?genesymbol=eq.${gen}`);\n    const datos = response.data;\n    const listaAlelos = Array.from(new Set(datos.map(item => item.name)));\n    listaAlelos.sort();\n    return listaAlelos;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\nasync function ID_CPIC_Farmaco(nombreFarmaco) {\n  try {\n    const response = await axios.get(`https://api.cpicpgx.org/v1/drug?name=eq.${nombreFarmaco}`);\n    const datos = response.data;\n    if (datos.length > 0) {\n      const ID_Farmaco = datos[0].drugid;\n      return ID_Farmaco;\n    } else {\n      return '';\n    }\n  } catch (error) {\n    console.error(error);\n    return '';\n  }\n}\n_c = ID_CPIC_Farmaco;\nasync function fenotipoSegunAlelos(gen, alelo1, alelo2) {\n  try {\n    const response = await axios.get(`https://api.cpicpgx.org/v1/diplotype?genesymbol=eq.${gen}&diplotype=eq.${alelo1}/${alelo2}`);\n    const datos = response.data;\n    return datos;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\nasync function urlGuia(farmaco, ID) {\n  try {\n    const response = await axios.get(`https://api.cpicpgx.org/v1/drug?name=eq.${farmaco}&select=drugid,name,guideline_for_drug(*)`);\n    const datos = response.data;\n    const guia = datos.find(item => item.guideline_for_drug.id === ID);\n    if (guia) {\n      return guia.guideline_for_drug.url;\n    }\n    return '';\n  } catch (error) {\n    console.error(error);\n    return '';\n  }\n}\nasync function recomendacionClinica(gen, alelo1, alelo2, farmaco) {\n  const lista = [];\n  const fenotipo = await fenotipoSegunAlelos(gen, alelo1, alelo2);\n  if (fenotipo.length > 0) {\n    const lookupkey = fenotipo[0].lookupkey;\n    const ID_Farmaco = await ID_CPIC_Farmaco(farmaco);\n    try {\n      const response = await axios.get(`https://api.cpicpgx.org/v1/recommendation?select=drug(name), guideline(name), * &drugid=eq.${ID_Farmaco}&lookupkey=cs.${JSON.stringify(lookupkey)}`);\n      const datos = response.data;\n      if (datos.length > 0) {\n        lista.push(fenotipo[0].generesult);\n        lista.push(datos[0].drugrecommendation);\n        lista.push(datos[0].guideline.name);\n        lista.push(await urlGuia(farmaco, datos[0].guidelineid));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return lista;\n}\nasync function BuscarFarmacosRelacionadosGen(gen) {\n  try {\n    const response = await axios.get(`https://api.pharmgkb.org/v1/data/clinicalAnnotation?location.genes.symbol=${gen}`);\n    const datos = response.data;\n    if (datos.status === 'success') {\n      const listaFarmacos = Array.from(new Set(datos.data.map(item => item.relatedChemicals[0].name)));\n      listaFarmacos.sort();\n      return listaFarmacos;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n_c2 = BuscarFarmacosRelacionadosGen;\nexport { buscarAlelosGen, ID_CPIC_Farmaco, fenotipoSegunAlelos, urlGuia, recomendacionClinica, BuscarFarmacosRelacionadosGen };\nvar _c, _c2;\n$RefreshReg$(_c, \"ID_CPIC_Farmaco\");\n$RefreshReg$(_c2, \"BuscarFarmacosRelacionadosGen\");","map":{"version":3,"names":["axios","buscarAlelosGen","gen","response","get","datos","data","listaAlelos","Array","from","Set","map","item","name","sort","error","console","ID_CPIC_Farmaco","nombreFarmaco","length","ID_Farmaco","drugid","_c","fenotipoSegunAlelos","alelo1","alelo2","urlGuia","farmaco","ID","guia","find","guideline_for_drug","id","url","recomendacionClinica","lista","fenotipo","lookupkey","JSON","stringify","push","generesult","drugrecommendation","guideline","guidelineid","BuscarFarmacosRelacionadosGen","status","listaFarmacos","relatedChemicals","_c2","$RefreshReg$"],"sources":["C:/Users/walid/Desktop/Frama/Farma/Main/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nasync function buscarAlelosGen(gen) {\r\n  try {\r\n    const response = await axios.get(`https://api.cpicpgx.org/v1/allele?genesymbol=eq.${gen}`);\r\n    const datos = response.data;\r\n    const listaAlelos = Array.from(new Set(datos.map(item => item.name)));\r\n    listaAlelos.sort();\r\n    return listaAlelos;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function ID_CPIC_Farmaco(nombreFarmaco) {\r\n  try {\r\n    const response = await axios.get(`https://api.cpicpgx.org/v1/drug?name=eq.${nombreFarmaco}`);\r\n    const datos = response.data;\r\n    if (datos.length > 0) {\r\n      const ID_Farmaco = datos[0].drugid;\r\n      return ID_Farmaco;\r\n    } else {\r\n      return '';\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    return '';\r\n  }\r\n}\r\n\r\nasync function fenotipoSegunAlelos(gen, alelo1, alelo2) {\r\n  try {\r\n    const response = await axios.get(`https://api.cpicpgx.org/v1/diplotype?genesymbol=eq.${gen}&diplotype=eq.${alelo1}/${alelo2}`);\r\n    const datos = response.data;\r\n    return datos;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nasync function urlGuia(farmaco, ID) {\r\n  try {\r\n    const response = await axios.get(`https://api.cpicpgx.org/v1/drug?name=eq.${farmaco}&select=drugid,name,guideline_for_drug(*)`);\r\n    const datos = response.data;\r\n    const guia = datos.find(item => item.guideline_for_drug.id === ID);\r\n    if (guia) {\r\n      return guia.guideline_for_drug.url;\r\n    }\r\n    return '';\r\n  } catch (error) {\r\n    console.error(error);\r\n    return '';\r\n  }\r\n}\r\n\r\nasync function recomendacionClinica(gen, alelo1, alelo2, farmaco) {\r\n  const lista = [];\r\n  const fenotipo = await fenotipoSegunAlelos(gen, alelo1, alelo2);\r\n  if (fenotipo.length > 0) {\r\n    const lookupkey = fenotipo[0].lookupkey;\r\n    const ID_Farmaco = await ID_CPIC_Farmaco(farmaco);\r\n    try {\r\n      const response = await axios.get(`https://api.cpicpgx.org/v1/recommendation?select=drug(name), guideline(name), * &drugid=eq.${ID_Farmaco}&lookupkey=cs.${JSON.stringify(lookupkey)}`);\r\n      const datos = response.data;\r\n      if (datos.length > 0) {\r\n        lista.push(fenotipo[0].generesult);\r\n        lista.push(datos[0].drugrecommendation);\r\n        lista.push(datos[0].guideline.name);\r\n        lista.push(await urlGuia(farmaco, datos[0].guidelineid));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  return lista;\r\n}\r\n\r\nasync function BuscarFarmacosRelacionadosGen(gen) {\r\n  try {\r\n    const response = await axios.get(`https://api.pharmgkb.org/v1/data/clinicalAnnotation?location.genes.symbol=${gen}`);\r\n    const datos = response.data;\r\n    if (datos.status === 'success') {\r\n      const listaFarmacos = Array.from(new Set(datos.data.map(item => item.relatedChemicals[0].name)));\r\n      listaFarmacos.sort();\r\n      return listaFarmacos;\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport { buscarAlelosGen, ID_CPIC_Farmaco, fenotipoSegunAlelos, urlGuia, recomendacionClinica, BuscarFarmacosRelacionadosGen };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}